// Code generated by MockGen. DO NOT EDIT.
// Source: auth/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Authorization is a mock of Authorization interface.
type Authorization struct {
	ctrl     *gomock.Controller
	recorder *AuthorizationMockRecorder
}

// AuthorizationMockRecorder is the mock recorder for Authorization.
type AuthorizationMockRecorder struct {
	mock *Authorization
}

// NewAuthorization creates a new mock instance.
func NewAuthorization(ctrl *gomock.Controller) *Authorization {
	mock := &Authorization{ctrl: ctrl}
	mock.recorder = &AuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Authorization) EXPECT() *AuthorizationMockRecorder {
	return m.recorder
}

// IsAuthorized mocks base method.
func (m *Authorization) IsAuthorized(r *http.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAuthorized", r)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAuthorized indicates an expected call of IsAuthorized.
func (mr *AuthorizationMockRecorder) IsAuthorized(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAuthorized", reflect.TypeOf((*Authorization)(nil).IsAuthorized), r)
}
